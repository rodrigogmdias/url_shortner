// Mocks generated by Mockito 5.4.6 from annotations
// in history/test/src/data/history_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:storage/src/memory_storage.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [MemoryStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockMemoryStorage extends _i1.Mock implements _i2.MemoryStorage {
  @override
  _i3.Future<void> save(String? key, String? value) =>
      (super.noSuchMethod(
            Invocation.method(#save, [key, value]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Stream<String?> watch(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#watch, [key]),
            returnValue: _i3.Stream<String?>.empty(),
            returnValueForMissingStub: _i3.Stream<String?>.empty(),
          )
          as _i3.Stream<String?>);

  @override
  _i3.Future<void> delete(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#delete, [key]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<List<String>> getAllKeys() =>
      (super.noSuchMethod(
            Invocation.method(#getAllKeys, []),
            returnValue: _i3.Future<List<String>>.value(<String>[]),
            returnValueForMissingStub: _i3.Future<List<String>>.value(
              <String>[],
            ),
          )
          as _i3.Future<List<String>>);

  @override
  _i3.Future<void> addToList<T>(
    String? key,
    T? value, {
    Object? Function(T)? toEncodable,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #addToList,
              [key, value],
              {#toEncodable: toEncodable},
            ),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<List<T>> getList<T>(String? key, T Function(Object?)? fromJson) =>
      (super.noSuchMethod(
            Invocation.method(#getList, [key, fromJson]),
            returnValue: _i3.Future<List<T>>.value(<T>[]),
            returnValueForMissingStub: _i3.Future<List<T>>.value(<T>[]),
          )
          as _i3.Future<List<T>>);

  @override
  _i3.Stream<List<T>> watchList<T>(
    String? key,
    T Function(Object?)? fromJson,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#watchList, [key, fromJson]),
            returnValue: _i3.Stream<List<T>>.empty(),
            returnValueForMissingStub: _i3.Stream<List<T>>.empty(),
          )
          as _i3.Stream<List<T>>);

  @override
  _i3.Future<void> clearList(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#clearList, [key]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}
